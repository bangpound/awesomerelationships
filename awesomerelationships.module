<?php
// $Id$

/**
 * Implementation of hook_entity_info().
 */
function awesomerelationships_entity_info() {
  $return = array(
    'relationship' => array(
      'label' => t('Relationship'),
      'base table' => 'relationship',
      'fieldable' => FALSE,
      'controller class' => 'EntityRelationshipController',
      'entity keys' => array(
        'id' => 'relationship_id',
        'bundle' => 'predicate',
      ),
      'bundle keys' => array(
        'bundle' => 'predicate',
      ),
      'bundles' => array(
        // describe Drupal's built in relationships
        'creator' => array(
          'label' => t('Author'),
        ),
      ),
      'view modes' => array(),
    ),
  );
  return $return;
}

function awesomerelationships_entity_info_alter(&$entity_info) {
  $entity_info['node']['relationships']['user'] = array(
    // a handler -- this can be reusable or specific to the entity type
    // it will do things like list 'user' entities related to one or more nodes
    'handler' => 'AwesomerelationshipsEntityRelation',
  );
}

function awesomerelationships_field_info_alter(&$field_info) {
  $field_info['file']['relationships']['files'] = array(
    'handler' => 'AwesomerelationshipsFieldRelation',
  );
}

/**
 * Controller class for entity relationships.
 *
 * This extends the DrupalDefaultEntityController class. The buildQuery method
 * is overriden to add the self join and to exclude rows where the left and
 * right entities are identical.
 */
class EntityRelationshipController extends DrupalDefaultEntityController {

  protected function buildQuery($ids, $conditions = array(), $revision_id = FALSE) {
    $query = parent::buildQuery($ids, $conditions, $revision_id);
    _awesomerationships_query_helper($query);
    return $query;
  }
}

function _awesomerationships_query_helper($query) {
  // Add the machine name field from the {taxonomy_vocabulary} table.
  $query->innerJoin('relationship_data', 'l', 'base.relationship_id = l.relationship_id');
  $query->innerJoin('relationship_data', 'r', 'base.relationship_id = r.relationship_id AND NOT (l.entity_type = r.entity_type AND l.entity_id = r.entity_id)');
  $query->addField('base', 'relationship_id');
  $query->addField('base', 'predicate');
  $query->addField('l', 'entity_type', 'left_entity_type');
  $query->addField('l', 'entity_id', 'left_entity_id');
  $query->addField('r', 'entity_type', 'right_entity_type');
  $query->addField('r', 'entity_id', 'right_entity_id');
}

/**
 * Interface for relationship handlers.
 */
interface AwesomeRelationship {
  // bangpound
  public function getRelated($entity, $type);

  // becw
  function init($left, $right); // sets types
  function set_left($entity_ids = array()); // sets left objects
  function set_right($entity_ids = array()); // sets right objects
  function get_left(); // returns left
  function get_right(); // returns right
}

/**
 * Handler class for entity relationships.
 */
class AwesomeRelationshipHandler implements AwesomeRelationship {

  function __construct() {
  }

  /**
   * Entity is a fully loaded entity (node, user, term, etc.)
   * Type is the predicate.
   */
  public function getRelated($entity, $type) {
    return NULL;
  }

  function init($left, $right) {
  }

  function set_left($entity_ids = array()) {
  }

  function set_right($entity_ids = array()) {
  }

  function get_left() {
  }

  function get_right() {
  }

}

function awesomerelationships_field_info() {
  return array(
    'awesomerelationship' => array(
      'label' => t('Awesome Relationship'),
      'description' => t('This field stores relationships between entities.'),
      'settings' => array('allowed_values' => '', 'allowed_values_function' => ''),
      'default_widget' => 'awesomerelationship_default',
      'default_formatter' => 'awesomerelationship_default',
    ),
  );
}

function awesomerelationships_field_is_empty() {
  return FALSE;
}

function awesomerelationships_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  list($entity_id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  $insert1 = db_insert('relationship')->fields(array('predicate'));
  $insert2 = db_insert('relationship_data')->fields(array('relationship_id', 'entity_type', 'entity_id'));
  foreach ($items as $item) {
    $relationship_id = $insert1->values(array($field['field_name']))->execute();
    $insert2->values(array($relationship_id, $item['entity_type'], $item['entity_id']));
    $insert2->values(array($relationship_id, $entity_type, $entity_id));
  }
  $insert2->execute();
  $items = array();
}

function awesomerelationships_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  awesomerelationships_field_delete($entity_type, $entity, $field, $instance, $langcode, $items);
  awesomerelationships_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}

function awesomerelationships_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  list($entity_id) = entity_extract_ids($entity_type, $entity);
  $result = db_query('SELECT relationship_id FROM {relationship_data} WHERE entity_type = :entity_type AND entity_id = :entity_id', array(':entity_type' => $entity_type, ':entity_id' => $entity_id));
  foreach ($result as $row) {
    db_delete('relationship')->condition('relationship_id', $row->relationship_id)->execute();
    db_delete('relationship_data')->condition('relationship_id', $row->relationship_id)->execute();
  }
}

function awesomerelationships_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  $info = entity_get_info($entity_type);
  $base_table = $info['base table'];
  $id_key = $info['entity keys']['id'];
  foreach ($entities as $entity) {
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $entity_ids[] = $id;
  }
  $query = db_select('relationship', 'base')
    ->condition('l.entity_type', $entity_type)
    ->condition('l.entity_id', $entity_ids);
  _awesomerationships_query_helper($query);
  $query->join($base_table, NULL, "%alias.$id_key = l.entity_id");
  foreach ($query->execute() as $item) {
    $items[$item->left_entity_id][] = array(
      'relationship_id' => $item->relationship_id,
      'predicate' => $item->predicate,
      'entity_id' => $item->right_entity_id,
      'entity_type' => $item->right_entity_type,
    );
  }
}

function awesomerelationships_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $entities_to_load = array();
  foreach ($items as $key => $item) {
    foreach ($item as $delta => $value) {
      $entities_to_load[$value['entity_type']][] = $value['entity_id'];
      $lookup[$value['entity_type']][$value['entity_id']][] = array($key, $delta);
    }
  }
  foreach ($entities_to_load as $entity_type => $ids) {
    $entities = entity_load($entity_type, $ids);
    foreach ($entities as $entity_id => $entity) {
      foreach ($lookup[$entity_type][$entity_id] as $data) {
        $items[$data[0]][$data[1]]['entity'] = $entity;
      }
    }
  }
}

function awesomerelationships_field_widget_info() {
  return array(
    'awesomerelationship_default' => array(
      'label' => t('Awesomerelationship chooser'),
      'field types' => array('awesomerelationship'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function awesomerelationships_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['#type'] = 'fieldset';
  $element['entity_type'] = array(
    '#type' => 'select',
    '#title' => t('Entity type'),
    '#options' => drupal_map_assoc(array_keys(entity_get_info())),
    '#default_value' => isset($items[$delta]) ? $items[$delta]['entity_type'] : '',
  );
  $element['entity_id'] = array(
    '#title' => t('Entity ID'),
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]) ? $items[$delta]['entity_id'] : '',
  );
  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function awesomerelationships_field_formatter_info() {
  return array(
    'awesomerelationship_default' => array(
      'label' => t('Default'),
      'field types' => array('awesomerelationship'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function awesomerelationships_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $list = array();
  foreach ($items as $item) {
    $uri = entity_uri($item['entity_type'], $item['entity']);
    $list[] = l($item['entity_type'], $uri['path'], $uri['options']);
  }
  return array(
    '#theme' => 'item_list',
    '#items' => $list,
  );
}
